@* @page "/SaveLivre"


@using ManagementBooks.Classes.Models;
@using MudBlazorTemplates2.Services.LivreService;
@using MudBlazorTemplates2.Services.AuteurService;
@using MudBlazorTemplates2.Services.CategorieService;
@inject ILivreService livreservice
@inject IAuteurService auteurservice

@inject ICategorieService categorieservices


<EditForm Model="@editViewModel" OnValidSubmit="AddLivreWithCategories">
    <DataAnnotationsValidator />

    <div class="form-group">
        <label for="NameLiv">Name:</label>
        <InputText id="NameLiv" class="form-control" @bind-Value="editViewModel.livre.NameLiv" />
        <ValidationMessage For="@(() =>editViewModel.livre.NameLiv)" />
    </div>

    <MudSelect Dense="true" Label="Select Auteur" Variant="Variant.Text" @bind-Value="editViewModel.livre.AuteurId">
        <MudSelectItem Value="-1">Remplir</MudSelectItem>
        @foreach (var auteur in auteurs)
        {
            <MudSelectItem Value="@auteur.Id">@auteur.NameAut</MudSelectItem>
        }
    </MudSelect>
    <ValidationMessage For="@(() => livre.AuteurId)" />

    <!-- Add other Livre properties as needed -->


    <MudSelect Label="Select Categories" MultiSelection="true" @bind-SelectedValues="selectedCategory">
        @foreach (var auteur in categories)
        {
            <MudSelectItem Value="@auteur.Id">@auteur.NameCat</MudSelectItem>
        }
        <!-- Add more items as needed -->
    </MudSelect>

    <!-- Display selected values (for demonstration purposes) -->
    <h1>values</h1>
    @if (selectedCategory != null)
    {
        @foreach (var value in selectedCategory)
        {
            <p>@value</p>
        }
    }

    
    <br /> <br /> <br />

    <div class="form-group">
        <label for="Contenue">Name:</label>
        <InputText id="contenue" class="form-control" @bind-Value="editViewModel.Cont.Contenue" />
        <ValidationMessage For="@(() => editViewModel.Cont.Contenue)" />
    </div>

    <div class="form-group">
        <label for="NbPages">Number of Pages:</label>
        <InputNumber id="nbPages" type="number" class="form-control"  @bind-Value="editViewModel.Cont.NbrPages" />
        <ValidationMessage For="@(() => editViewModel.Cont.NbrPages)" />
    </div>
    <br /> <br />
    <button type="submit" class="btn btn-primary">Add Livre</button>
</EditForm>

<p>Selected auteurs: @string.Join(", ", livre.AuteurId)</p>

@code {

    public class EditViewModel
    {
        public Livre livre { get; set; }
        public ContenueLivre Cont { get; set; }
        // Other properties as needed
    }

    private Livre livre = new Livre();
    // private int nbPages=30;
    // private string contenue = "Sample Contenue";

    private ContenueLivre cont ;  //
    private List<Categorie> categories { get; set; } = new List<Categorie>();

    private  IEnumerable<int> selectedCategory = new List<int>();

    public List<Auteur> auteurs { get; set; } = new List<Auteur>();

    // private EditViewModel
    //     editViewModel = new EditViewModel
    //         {
    //             livre = new Livre(),
    //             Cont = new ContenueLivre(0, "", 2)
    //         };

    protected override async Task OnInitializedAsync()
    {
        categories = await categorieservices.GetAllCategories();
        auteurs = await auteurservice.GetAllAuteurs();
       
    }

    private async Task AddLivreWithCategories()
    {

       
        cont = new ContenueLivre(editViewModel.Cont.NbrPages, editViewModel.Cont.Contenue, editViewModel.livre.Id);
        await livreservice.AddLivreCat(editViewModel.livre, selectedCategory , cont);


    }

  
}


 *@