// <auto-generated />
using ManagementBooks.API.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace ManagementBooks.API.Migrations
{
    [DbContext(typeof(DataContext))]
    [Migration("20231120081034_IntitalMig")]
    partial class IntitalMig
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.25")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("ManagementBooks.Classes.Models.Auteur", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("NameAut")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Auteurs");
                });

            modelBuilder.Entity("ManagementBooks.Classes.Models.Categorie", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("NameCat")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Categories");
                });

            modelBuilder.Entity("ManagementBooks.Classes.Models.CatLivr", b =>
                {
                    b.Property<int>("LivreId")
                        .HasColumnType("int");

                    b.Property<int>("CategorieId")
                        .HasColumnType("int");

                    b.HasKey("LivreId", "CategorieId");

                    b.HasIndex("CategorieId");

                    b.ToTable("CatLivrs");
                });

            modelBuilder.Entity("ManagementBooks.Classes.Models.Client", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("NameClt")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("clients");
                });

            modelBuilder.Entity("ManagementBooks.Classes.Models.ContenueLivre", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Contenue")
                        .HasColumnType("nvarchar(MAX)");

                    b.Property<int>("LivreId")
                        .HasColumnType("int");

                    b.Property<int>("NbrPages")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("LivreId")
                        .IsUnique();

                    b.ToTable("ContenueLivres");
                });

            modelBuilder.Entity("ManagementBooks.Classes.Models.Livre", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("AuteurId")
                        .HasColumnType("int");

                    b.Property<string>("NameLiv")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("AuteurId");

                    b.ToTable("Livres");
                });

            modelBuilder.Entity("ManagementBooks.Classes.Models.CatLivr", b =>
                {
                    b.HasOne("ManagementBooks.Classes.Models.Categorie", "Categorie")
                        .WithMany("CategoLivres")
                        .HasForeignKey("CategorieId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ManagementBooks.Classes.Models.Livre", "Livre")
                        .WithMany("CategoLivres")
                        .HasForeignKey("LivreId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Categorie");

                    b.Navigation("Livre");
                });

            modelBuilder.Entity("ManagementBooks.Classes.Models.ContenueLivre", b =>
                {
                    b.HasOne("ManagementBooks.Classes.Models.Livre", "livre")
                        .WithOne("ContenueLivre")
                        .HasForeignKey("ManagementBooks.Classes.Models.ContenueLivre", "LivreId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("livre");
                });

            modelBuilder.Entity("ManagementBooks.Classes.Models.Livre", b =>
                {
                    b.HasOne("ManagementBooks.Classes.Models.Auteur", "Auteur")
                        .WithMany("Livres")
                        .HasForeignKey("AuteurId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Auteur");
                });

            modelBuilder.Entity("ManagementBooks.Classes.Models.Auteur", b =>
                {
                    b.Navigation("Livres");
                });

            modelBuilder.Entity("ManagementBooks.Classes.Models.Categorie", b =>
                {
                    b.Navigation("CategoLivres");
                });

            modelBuilder.Entity("ManagementBooks.Classes.Models.Livre", b =>
                {
                    b.Navigation("CategoLivres");

                    b.Navigation("ContenueLivre");
                });
#pragma warning restore 612, 618
        }
    }
}
